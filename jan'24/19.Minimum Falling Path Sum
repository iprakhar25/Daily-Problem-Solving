class Solution {
    public int minFallingPathSum(int[][] matrix) {
        int n = matrix.length;
        int[][] dp = new int[n][n];
        for (int[] row : dp) {
            Arrays.fill(row, Integer.MAX_VALUE);
        }
        for (int i = 0; i < n; i++) {
            dp[0][i] = matrix[0][i];
        }
        for (int i = 1; i < n; i++) {
            for (int j = 0; j < n; j++) {
                int minMove = Math.min(dp[i - 1][j], dp[i - 1][Math.max(0, j - 1)]);
                minMove = Math.min(minMove, j < n - 1 ? dp[i - 1][j + 1] : Integer.MAX_VALUE);
                dp[i][j] = matrix[i][j] + minMove;
            }
        }
        
        int minSum = Integer.MAX_VALUE;
        for (int sum : dp[n - 1]) {
            minSum = Math.min(minSum, sum);
        }
        return minSum;
    }
}
